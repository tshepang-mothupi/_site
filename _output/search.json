[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Submission",
    "section": "",
    "text": "STATISTICAL COMPUTING",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Practical One</span>"
    ]
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Submission",
    "section": "Overview",
    "text": "Overview\nThis Quarto project contains solutions to the practical questions outlined below. Each practical is answered in its own `.qmd` file, and the project is hosted on GitHub for peer assessment.\nThe following practicals are included:\n- Practical One: Data exploration and linear regression using matrix calculations.\n- Lowess Practical: Implementing and comparing locally weighted scatterplot smoothing (Lowess).\n- Practical Day Five: Data visualization exercises using `ggplot2` and `palmerpenguins`.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Practical One</span>"
    ]
  },
  {
    "objectID": "index.html#practical-one",
    "href": "index.html#practical-one",
    "title": "Submission",
    "section": "Practical One",
    "text": "Practical One\nThis practical involves fundamental data exploration and regression techniques:\n1. Identify rows in the `airquality` dataset with missing values.\n2. Compute the mean, standard deviation, minimum, and maximum for temperature and ozone levels.\n3. Perform linear regression using matrix calculations and compare results with `lm()`.\nRefer to Practical One for detailed solutions.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Practical One</span>"
    ]
  },
  {
    "objectID": "index.html#lowess-practical",
    "href": "index.html#lowess-practical",
    "title": "Submission",
    "section": "Lowess Practical",
    "text": "Lowess Practical\nThis section introduces Lowess smoothing, a non-parametric regression technique:\n1. Understand the Lowess algorithm and its steps (data selection, span, weighting, regression).\n2. Implement a custom Lowess function in R.\n3. Compare the custom implementation with R’s built-in `lowess()` function.\n4. Visualize and compare the smoothed outputs.\nRefer to Lowess Practical for implementation details.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Practical One</span>"
    ]
  },
  {
    "objectID": "index.html#practical-day-five",
    "href": "index.html#practical-day-five",
    "title": "Submission",
    "section": "Practical Day Five",
    "text": "Practical Day Five\nThis practical focuses on visualization techniques:\n1. Simulate and plot a normal distribution using `ggplot2`, overlaying the true density function.\n2. Generate a well-formatted two-way frequency table of penguin species and island locations.\n3. Plot flipper length distributions using boxplots, density plots, and faceted views.\nRefer to Practical Day Five for detailed solutions.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Practical One</span>"
    ]
  },
  {
    "objectID": "prac-day-1.html",
    "href": "prac-day-1.html",
    "title": "Part 1: Practical Day One",
    "section": "",
    "text": "Question 1\n\n\nCode\ndf &lt;- airquality\n\ndf_NA &lt;- df[apply(df,1,anyNA), ]\n\n\ndf_NA\n\n\n    Ozone Solar.R Wind Temp Month Day\n5      NA      NA 14.3   56     5   5\n6      28      NA 14.9   66     5   6\n10     NA     194  8.6   69     5  10\n11      7      NA  6.9   74     5  11\n25     NA      66 16.6   57     5  25\n26     NA     266 14.9   58     5  26\n27     NA      NA  8.0   57     5  27\n32     NA     286  8.6   78     6   1\n33     NA     287  9.7   74     6   2\n34     NA     242 16.1   67     6   3\n35     NA     186  9.2   84     6   4\n36     NA     220  8.6   85     6   5\n37     NA     264 14.3   79     6   6\n39     NA     273  6.9   87     6   8\n42     NA     259 10.9   93     6  11\n43     NA     250  9.2   92     6  12\n45     NA     332 13.8   80     6  14\n46     NA     322 11.5   79     6  15\n52     NA     150  6.3   77     6  21\n53     NA      59  1.7   76     6  22\n54     NA      91  4.6   76     6  23\n55     NA     250  6.3   76     6  24\n56     NA     135  8.0   75     6  25\n57     NA     127  8.0   78     6  26\n58     NA      47 10.3   73     6  27\n59     NA      98 11.5   80     6  28\n60     NA      31 14.9   77     6  29\n61     NA     138  8.0   83     6  30\n65     NA     101 10.9   84     7   4\n72     NA     139  8.6   82     7  11\n75     NA     291 14.9   91     7  14\n83     NA     258  9.7   81     7  22\n84     NA     295 11.5   82     7  23\n96     78      NA  6.9   86     8   4\n97     35      NA  7.4   85     8   5\n98     66      NA  4.6   87     8   6\n102    NA     222  8.6   92     8  10\n103    NA     137 11.5   86     8  11\n107    NA      64 11.5   79     8  15\n115    NA     255 12.6   75     8  23\n119    NA     153  5.7   88     8  27\n150    NA     145 13.2   77     9  27\n\n\n\n\nCode\nnum_NA_rows &lt;- nrow(df_NA)\nlist_NA_rows &lt;- which(apply(df,1,anyNA))\n\n\ncat(\"There are\", num_NA_rows, \"rows with missing values in the dataset\\n\\nThese are rows:\", paste(list_NA_rows, collapse = \", \"))\n\n\nThere are 42 rows with missing values in the dataset\n\nThese are rows: 5, 6, 10, 11, 25, 26, 27, 32, 33, 34, 35, 36, 37, 39, 42, 43, 45, 46, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 72, 75, 83, 84, 96, 97, 98, 102, 103, 107, 115, 119, 150\n\n\n\n\nQuestion 2\n\n\nCode\ntemp_data &lt;- airquality$Temp\ncleaned_temp_data &lt;- temp_data[!is.na(temp_data)]\n\n\nozone_data &lt;- airquality$Ozone\ncleaned_ozone_data &lt;-  ozone_data[!is.na(temp_data)]\n\ncat(\"The mean temperature is\", mean(cleaned_temp_data), \"units, while the mean ozone level is\", mean(ozone_data,na.rm = TRUE), \"units.\\n\\n\")\n\n\nThe mean temperature is 77.88235 units, while the mean ozone level is 42.12931 units.\n\n\nCode\ncat(\"The standard deviation of the temperature is\", sd(cleaned_temp_data), \"units, while the standard deviation of the ozone level is\", sd(ozone_data, na.rm = TRUE), \"units.\\n\\n\")\n\n\nThe standard deviation of the temperature is 9.46527 units, while the standard deviation of the ozone level is 32.98788 units.\n\n\nCode\ncat(\"The minimum temperature is\", min(cleaned_temp_data), \"units, while the minimum ozone level is\", min(ozone_data, na.rm = TRUE), \"units.\\n\\n\")\n\n\nThe minimum temperature is 56 units, while the minimum ozone level is 1 units.\n\n\nCode\ncat(\"The maximum temperature is\", max(cleaned_temp_data), \"units, while the maximum ozone level is\", max(ozone_data, na.rm = TRUE), \"units.\\n\\n\")\n\n\nThe maximum temperature is 97 units, while the maximum ozone level is 168 units.\n\n\n\n\nQuestion 3\n\nEstimates using first principles\n\n\nCode\nols_estimates &lt;- function(X, Y){\n  X_matrix &lt;- cbind(1,X)\n  Y_matrix &lt;- Y\n  \n  # Beta estimates\n  beta_hat &lt;- solve(t(X_matrix) %*% X_matrix) %*% t(X_matrix) %*% Y_matrix\n  \n  # Residuals\n  Y_hat &lt;- X_matrix %*% beta_hat\n  residuals &lt;- Y_matrix - Y_hat\n  \n  \n  # Residual variance\n  n &lt;- nrow(X_matrix)\n  p &lt;- ncol(X_matrix)\n  res_var &lt;- sum(residuals^2)/(n-p)\n  \n  # Standard errors of the Betas\n  cov_matrix &lt;- res_var * solve(t(X_matrix) %*% X_matrix)\n  std_errors &lt;- sqrt(diag(cov_matrix))\n  \n  # t-stats\n  t_values &lt;- beta_hat/std_errors\n  \n  #p-values\n  p_values &lt;- 2 * (1-pt(abs(t_values), df=n-p))\n  \n  results &lt;- data.frame(\n    beta &lt;- beta_hat,\n    std_error &lt;- std_errors,\n    t_stat &lt;- t_values,\n    p_value &lt;- p_values\n  )\n  \n  return(results)\n  \n}\n\n\nols_results &lt;- ols_estimates(cars$speed, cars$dist)\nprint(ols_results)\n\n\n  beta....beta_hat std_error....std_errors t_stat....t_values\n        -17.579095               6.7584402          -2.601058\nX         3.932409               0.4155128           9.463990\n  p_value....p_values\n         1.231882e-02\nX        1.489919e-12\n\n\n\n\n\nQuestion 4\n\nEstimates using lm() function\n\n\nCode\nmodel &lt;- lm(dist ~ speed, cars)\nsummary(model)\n\n\n\nCall:\nlm(formula = dist ~ speed, data = cars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-29.069  -9.525  -2.272   9.215  43.201 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -17.5791     6.7584  -2.601   0.0123 *  \nspeed         3.9324     0.4155   9.464 1.49e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15.38 on 48 degrees of freedom\nMultiple R-squared:  0.6511,    Adjusted R-squared:  0.6438 \nF-statistic: 89.57 on 1 and 48 DF,  p-value: 1.49e-12\n\n\nTherefore the estimates match.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Part 1: Practical Day One</span>"
    ]
  },
  {
    "objectID": "prac2.html",
    "href": "prac2.html",
    "title": "Part 2: Lowess Project",
    "section": "",
    "text": "Code\nlibrary(\"ggplot2\")\n\n\n\nQuestion 1\n\n\nCode\nset.seed(1)\n\nx &lt;- 1:100\ne &lt;- rnorm(100, mean = 0, sd = 0.2)\ny &lt;- sin(x/10) + e\n\n\n\n\nQuestion 2\n\n\nCode\ncustomLowess &lt;- function(x, y, f = 0.2){\n  # Number of observations\n  n &lt;- length(x)\n  \n  # Size of closed neighbourhood\n  k &lt;- floor(f * n)\n  \n  # Smoothed y values\n  y_smoothed &lt;- numeric(n)\n  \n  for (i in 1:n){\n    # Distance from current point\n    distances &lt;- abs(x[i] - x)\n    \n    # Take the sorted positions of the points\n    sorted_distance_positions &lt;- order(distances)\n    \n    # Take the positions of the nearest neighbours\n    neighbour_positions &lt;- sorted_distance_positions[1:k]\n    \n    # Maximum distance\n    neighbour_distances &lt;- distances[neighbour_positions]\n    d_max &lt;- max(neighbour_distances)\n    \n    # Compute weights\n    w &lt;- (1 - (distances[neighbour_positions] / d_max)^3)^3\n    \n    # Weighted regression\n    x_neighbourhood &lt;- cbind(1, x[neighbour_positions])\n    y_neighbourhood &lt;- y[neighbour_positions]\n    W &lt;- diag(w)\n    beta_hat &lt;- solve(t(x_neighbourhood) %*% W %*% x_neighbourhood) %*% t(x_neighbourhood) %*% W %*% y_neighbourhood\n    \n    y_smooth &lt;- c(1, x[i]) %*% beta_hat\n    \n    y_smoothed[i] &lt;- y_smooth\n  }\n  \n  results &lt;- data.frame(\n    x_new = x,\n    y_new = y_smoothed\n  )\n  \n  return(results)\n}\n\n\n\n\nQuestion 3\n\n\nCode\nlowess_results &lt;- data.frame(lowess(x,y,f=0.2,iter=0))\n\ncustomLowess_results &lt;- customLowess(x,y)\n\nprint(lowess_results)\n\n\n      x            y\n1     1  0.187572482\n2     2  0.263567275\n3     3  0.337723282\n4     4  0.410117028\n5     5  0.480993290\n6     6  0.550460770\n7     7  0.618571907\n8     8  0.685530699\n9     9  0.751505149\n10   10  0.814920254\n11   11  0.860113789\n12   12  0.899662311\n13   13  0.933200174\n14   14  0.959614183\n15   15  0.974961198\n16   16  0.976624002\n17   17  0.966716663\n18   18  0.947417805\n19   19  0.919624057\n20   20  0.882631509\n21   21  0.836168108\n22   22  0.779587642\n23   23  0.713627091\n24   24  0.639742962\n25   25  0.560566748\n26   26  0.476258347\n27   27  0.386536566\n28   28  0.292772220\n29   29  0.196633503\n30   30  0.100986428\n31   31  0.009325577\n32   32 -0.077476462\n33   33 -0.161546929\n34   34 -0.244320815\n35   35 -0.324763635\n36   36 -0.403887507\n37   37 -0.483185271\n38   38 -0.561812624\n39   39 -0.634864520\n40   40 -0.697647440\n41   41 -0.749140827\n42   42 -0.790446617\n43   43 -0.823283108\n44   44 -0.850509662\n45   45 -0.873670660\n46   46 -0.892223977\n47   47 -0.902112623\n48   48 -0.898640282\n49   49 -0.881693628\n50   50 -0.854750149\n51   51 -0.819781878\n52   52 -0.776800306\n53   53 -0.724249095\n54   54 -0.663593651\n55   55 -0.596532629\n56   56 -0.523411137\n57   57 -0.445142931\n58   58 -0.364068622\n59   59 -0.282996709\n60   60 -0.200741520\n61   61 -0.116347857\n62   62 -0.027659636\n63   63  0.065343531\n64   64  0.160367930\n65   65  0.255566579\n66   66  0.345421577\n67   67  0.424892615\n68   68  0.495161241\n69   69  0.560524088\n70   70  0.623969304\n71   71  0.686385539\n72   72  0.743892466\n73   73  0.792915523\n74   74  0.831242985\n75   75  0.858450540\n76   76  0.874434727\n77   77  0.881943876\n78   78  0.885749481\n79   79  0.887803599\n80   80  0.887021321\n81   81  0.879940549\n82   82  0.864035942\n83   83  0.838217748\n84   84  0.802908239\n85   85  0.760288823\n86   86  0.712994563\n87   87  0.662010257\n88   88  0.606079992\n89   89  0.541265367\n90   90  0.464826096\n91   91  0.376487534\n92   92  0.265682734\n93   93  0.155113588\n94   94  0.045292840\n95   95 -0.064522970\n96   96 -0.174976886\n97   97 -0.286694058\n98   98 -0.400146780\n99   99 -0.515487403\n100 100 -0.632658978\n\n\nCode\nprint(customLowess_results)\n\n\n    x_new        y_new\n1       1  0.187572482\n2       2  0.263567275\n3       3  0.337723282\n4       4  0.410117028\n5       5  0.480993290\n6       6  0.550460770\n7       7  0.618571907\n8       8  0.685530699\n9       9  0.751505149\n10     10  0.814920254\n11     11  0.860113789\n12     12  0.899662311\n13     13  0.933200174\n14     14  0.959614183\n15     15  0.974961198\n16     16  0.976624002\n17     17  0.966716663\n18     18  0.947417805\n19     19  0.919624057\n20     20  0.882631509\n21     21  0.836168108\n22     22  0.779587642\n23     23  0.713627091\n24     24  0.639742962\n25     25  0.560566748\n26     26  0.476258347\n27     27  0.386536566\n28     28  0.292772220\n29     29  0.196633503\n30     30  0.100986428\n31     31  0.009325577\n32     32 -0.077476462\n33     33 -0.161546929\n34     34 -0.244320815\n35     35 -0.324763635\n36     36 -0.403887507\n37     37 -0.483185271\n38     38 -0.561812624\n39     39 -0.634864520\n40     40 -0.697647440\n41     41 -0.749140827\n42     42 -0.790446617\n43     43 -0.823283108\n44     44 -0.850509662\n45     45 -0.873670660\n46     46 -0.892223977\n47     47 -0.902112623\n48     48 -0.898640282\n49     49 -0.881693628\n50     50 -0.854750149\n51     51 -0.819781878\n52     52 -0.776800306\n53     53 -0.724249095\n54     54 -0.663593651\n55     55 -0.596532629\n56     56 -0.523411137\n57     57 -0.445142931\n58     58 -0.364068622\n59     59 -0.282996709\n60     60 -0.200741520\n61     61 -0.116347857\n62     62 -0.027659636\n63     63  0.065343531\n64     64  0.160367930\n65     65  0.255566579\n66     66  0.345421577\n67     67  0.424892615\n68     68  0.495161241\n69     69  0.560524088\n70     70  0.623969304\n71     71  0.686385539\n72     72  0.743892466\n73     73  0.792915523\n74     74  0.831242985\n75     75  0.858450540\n76     76  0.874434727\n77     77  0.881943876\n78     78  0.885749481\n79     79  0.887803599\n80     80  0.887021321\n81     81  0.879940549\n82     82  0.864035942\n83     83  0.838217748\n84     84  0.802908239\n85     85  0.760288823\n86     86  0.712994563\n87     87  0.662010257\n88     88  0.606079992\n89     89  0.541265367\n90     90  0.464826096\n91     91  0.376487534\n92     92  0.265682734\n93     93  0.155113588\n94     94  0.045292840\n95     95 -0.064522970\n96     96 -0.174976886\n97     97 -0.286694058\n98     98 -0.400146780\n99     99 -0.515487403\n100   100 -0.632658978\n\n\n\nLowess function plot\n\n\nCode\nplot(x,y, xlab = \"Independent variable (x)\", ylab = \"Dependent variable (y)\", main = \"Lowess function plot (f=0.2 and iter = 0)\")\n\nlines(lowess_results$x, lowess_results$y, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nCustom Lowess function plot\n\n\nCode\nplot(x,y,xlab = \"Independent variable (x)\", ylab = \"Dependent variable (y)\", main = \"Custom lowess function plot (f=default=0.2)\")\n\n\nlines(customLowess_results$x, customLowess_results$y, col = \"purple\")\n\n\n\n\n\n\n\n\n\nTherefore the functions are the same.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Part 2: Lowess Project</span>"
    ]
  },
  {
    "objectID": "prac-day-four.html",
    "href": "prac-day-four.html",
    "title": "Part 3: Practical Day Four",
    "section": "",
    "text": "Code\n# Install tidyverse if not already installed\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\n# Install and load nycflights13 for flight data\nif (!requireNamespace(\"nycflights13\", quietly = TRUE)) {\n  install.packages(\"nycflights13\")\n}\nlibrary(nycflights13)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(skimr)\n\n\n\nQuestion 1\nDisplaying the flights dataset in an alternative format. Used the tibble and skimr to do this.\n\n\nCode\ntibble(flights)\n\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nCode\nskim(flights)\n\n\n\nData summary\n\n\nName\nflights\n\n\nNumber of rows\n336776\n\n\nNumber of columns\n19\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n14\n\n\nPOSIXct\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncarrier\n0\n1.00\n2\n2\n0\n16\n0\n\n\ntailnum\n2512\n0.99\n5\n6\n0\n4043\n0\n\n\norigin\n0\n1.00\n3\n3\n0\n3\n0\n\n\ndest\n0\n1.00\n3\n3\n0\n105\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2013.00\n0.00\n2013\n2013\n2013\n2013\n2013\n▁▁▇▁▁\n\n\nmonth\n0\n1.00\n6.55\n3.41\n1\n4\n7\n10\n12\n▇▆▆▆▇\n\n\nday\n0\n1.00\n15.71\n8.77\n1\n8\n16\n23\n31\n▇▇▇▇▆\n\n\ndep_time\n8255\n0.98\n1349.11\n488.28\n1\n907\n1401\n1744\n2400\n▁▇▆▇▃\n\n\nsched_dep_time\n0\n1.00\n1344.25\n467.34\n106\n906\n1359\n1729\n2359\n▁▇▇▇▃\n\n\ndep_delay\n8255\n0.98\n12.64\n40.21\n-43\n-5\n-2\n11\n1301\n▇▁▁▁▁\n\n\narr_time\n8713\n0.97\n1502.05\n533.26\n1\n1104\n1535\n1940\n2400\n▁▃▇▇▇\n\n\nsched_arr_time\n0\n1.00\n1536.38\n497.46\n1\n1124\n1556\n1945\n2359\n▁▃▇▇▇\n\n\narr_delay\n9430\n0.97\n6.90\n44.63\n-86\n-17\n-5\n14\n1272\n▇▁▁▁▁\n\n\nflight\n0\n1.00\n1971.92\n1632.47\n1\n553\n1496\n3465\n8500\n▇▃▃▁▁\n\n\nair_time\n9430\n0.97\n150.69\n93.69\n20\n82\n129\n192\n695\n▇▂▂▁▁\n\n\ndistance\n0\n1.00\n1039.91\n733.23\n17\n502\n872\n1389\n4983\n▇▃▂▁▁\n\n\nhour\n0\n1.00\n13.18\n4.66\n1\n9\n13\n17\n23\n▁▇▇▇▅\n\n\nminute\n0\n1.00\n26.23\n19.30\n0\n8\n29\n44\n59\n▇▃▆▃▅\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ntime_hour\n0\n1\n2013-01-01 05:00:00\n2013-12-31 23:00:00\n2013-07-03 10:00:00\n6936\n\n\n\n\n\n\n\nQuestion 2\n\n\nCode\nflights |&gt; \n  filter(month == 1) |&gt; \n  group_by(carrier) |&gt; \n  summarise(\n    mean_distance = mean(distance, na.rm = TRUE), \n    sd_distance = sd(distance, na.rm = TRUE)\n  )|&gt; arrange(mean_distance)\n\n\n# A tibble: 16 × 3\n   carrier mean_distance sd_distance\n   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n 1 YV               229          0  \n 2 9E               476.       334. \n 3 EV               522.       294. \n 4 US               536.       553. \n 5 MQ               566.       223. \n 6 FL               691.       142. \n 7 OO               733         NA  \n 8 WN               942.       496. \n 9 B6              1062.       681. \n10 DL              1220.       644. \n11 AA              1350.       626. \n12 UA              1462.       778. \n13 F9              1620          0  \n14 AS              2402          0  \n15 VX              2495.        98.2\n16 HA              4983          0  \n\n\n\n\nQuestion 3\n\n\nCode\nflights |&gt; \n  filter(month == 1 & carrier==\"OO\") |&gt; count()\n\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1     1\n\n\nThe reason a sd of NA for flight OO is because there was only one flight (one observation) with this flight in the first month, which implies we can’t compute variance since we need two or more observations to calculate variance/standard deviation, hence we get NA.\n\n\nCode\nflight_YV &lt;- flights |&gt; filter(carrier == \"YV\" & month==1) \n\nflight_F9 &lt;- flights |&gt; filter(carrier == \"F9\" & month==1)\n\nflight_AS &lt;- flights |&gt; filter(carrier == \"AS\" & month==1)\n\nflight_HA &lt;- flights |&gt; filter(carrier == \"HA\" & month==1)\n\npaste(\"Distance covered by flight YV in all trips in the first month is\", unique(flight_YV$distance))\n\n\n[1] \"Distance covered by flight YV in all trips in the first month is 229\"\n\n\nCode\npaste(\"Distance covered by flight F9 in all trips in the first month is\", unique(flight_F9$distance))\n\n\n[1] \"Distance covered by flight F9 in all trips in the first month is 1620\"\n\n\nCode\npaste(\"Distance covered by flight AS in all trips in the first month is\", unique(flight_AS$distance))\n\n\n[1] \"Distance covered by flight AS in all trips in the first month is 2402\"\n\n\nCode\npaste(\"Distance covered by flight HA in all trips in the first month is\", unique(flight_HA$distance))\n\n\n[1] \"Distance covered by flight HA in all trips in the first month is 4983\"\n\n\nWe see that the value for all the carriers with standard deviation = 0, the distances remain the same therefore if there is no variability around the distance values the standard deviation will be 0 as a result the same applies for below.\n\n\nQuestion 4\n\n\nCode\nflights |&gt; group_by(month, carrier)|&gt; summarise(avg_dep_delay=mean(dep_delay, na.rm = TRUE))|&gt;\n  pivot_wider(\n    names_from = carrier,\n    values_from = avg_dep_delay\n  )\n\n\n`summarise()` has grouped output by 'month'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 12 × 17\n# Groups:   month [12]\n   month  `9E`    AA     AS    B6    DL    EV    F9    FL    HA    MQ    OO\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1 16.9   6.93  7.35   9.49  3.85 24.2  10     1.97 54.4   6.49 67   \n 2     2 16.5   8.28  0.722 13.8   5.54 21.5  29.8   5.18 17.4   8.09 NA   \n 3     3 13.4   8.70  8.42  14.2   9.93 26.2  16.8  17.3   1.16  7.19 NA   \n 4     4 13.6  11.7  11.3   15.2   8.17 22.8  24.6  13.1  -2.1  13.7  NA   \n 5     5 22.7   9.66  6.77   9.78  9.74 20.2  35.9  19.2  -1.45 13.9  NA   \n 6     6 29.0  14.6  13.1   20.4  18.7  25.5  29.4  38.8   1.47 20.8  61   \n 7     7 31.4  12.1   2.42  24.9  20.6  26.5  31.8  41.2  -1.71 20.7  NA   \n 8     8 17.3   7.17  2.87  15.7   9.85 16.3  22.2  23.4   1.68 10.1  64   \n 9     9  7.75  5.69 -4.52   6.63  5.53  8.24  8.26 16.9  -5.44  5.35 -4.94\n10    10  9.33  3.00  0.677  2.96  3.42 13.4   9.70 13.7  -5.10  4.48 NA   \n11    11  7.56  3.10  3.08   3.52  2.85  9.83 13.5  16.9  -5.44  3.28  0.8 \n12    12 19.8  11.7  18.0   17.0  10.8  27.9  13.1  26.1  -3.14 12.7  NA   \n# ℹ 5 more variables: UA &lt;dbl&gt;, US &lt;dbl&gt;, VX &lt;dbl&gt;, WN &lt;dbl&gt;, YV &lt;dbl&gt;\n\n\n\n\nQuestion 5\n\n\nCode\ntotal_delayed &lt;- flights|&gt;filter(dep_delay&gt;0)|&gt;\n  nrow()\n\ndelayed_arrival_timely &lt;- flights |&gt;\n  filter(dep_delay &gt; 0 & arr_delay &lt;= 0) |&gt; count()\n  \npaste0(\"Proportion of delayed but on arrival on time: \", 100*round(delayed_arrival_timely/total_delayed,4),\"%\")\n\n\n[1] \"Proportion of delayed but on arrival on time: 27.6%\"\n\n\n\n\nQuestion 6\n\n\nCode\nlibrary(dplyr)\n\n#1. Identify the routes that more than one airline flies \nmultiple_airline_routes &lt;- flights |&gt; group_by(origin, dest)|&gt;\n  summarise(num_airlines = n_distinct(carrier))|&gt;\n  filter(num_airlines&gt;1)\n\n\n`summarise()` has grouped output by 'origin'. You can override using the\n`.groups` argument.\n\n\nCode\nmultiple_airline_routes\n\n\n# A tibble: 128 × 3\n# Groups:   origin [3]\n   origin dest  num_airlines\n   &lt;chr&gt;  &lt;chr&gt;        &lt;int&gt;\n 1 EWR    ATL              4\n 2 EWR    AUS              2\n 3 EWR    BDL              2\n 4 EWR    BNA              2\n 5 EWR    BOS              3\n 6 EWR    BWI              2\n 7 EWR    CHS              2\n 8 EWR    CLE              2\n 9 EWR    CLT              3\n10 EWR    CVG              2\n# ℹ 118 more rows\n\n\n\n\nCode\n#2. Calculate the average arrival delay for each airline, exlcuding NAs\nflights |&gt; group_by(origin, dest)|&gt;\n  filter(n_distinct(carrier)&gt;1)|&gt;\n  group_by(origin, dest, carrier)|&gt;\n  summarise(avg_delay = mean(dep_delay, na.rm=TRUE, .groups = \"drop\"))|&gt;\n  left_join(airlines)|&gt;\n  relocate(name, .after = \"carrier\")\n\n\n`summarise()` has grouped output by 'origin', 'dest'. You can override using\nthe `.groups` argument.\nJoining with `by = join_by(carrier)`\n\n\n# A tibble: 343 × 5\n# Groups:   origin, dest [128]\n   origin dest  carrier name                     avg_delay\n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;                        &lt;dbl&gt;\n 1 EWR    ATL   9E      Endeavor Air Inc.            -5.75\n 2 EWR    ATL   DL      Delta Air Lines Inc.         11.9 \n 3 EWR    ATL   EV      ExpressJet Airlines Inc.     22.3 \n 4 EWR    ATL   UA      United Air Lines Inc.        15.8 \n 5 EWR    AUS   UA      United Air Lines Inc.        14.9 \n 6 EWR    AUS   WN      Southwest Airlines Co.        3.84\n 7 EWR    BDL   EV      ExpressJet Airlines Inc.     17.6 \n 8 EWR    BDL   UA      United Air Lines Inc.        25.7 \n 9 EWR    BNA   EV      ExpressJet Airlines Inc.     20.8 \n10 EWR    BNA   WN      Southwest Airlines Co.        8.38\n# ℹ 333 more rows\n\n\n\n6.3\n\n\nCode\n#3. Identify the airline with the worst and best average arrival delay\nflights |&gt; group_by(origin, dest)|&gt;\n  filter(n_distinct(carrier)&gt;1)|&gt;\n  group_by(origin, dest, carrier)|&gt;\n  summarise(avg_delay = mean(arr_delay, na.rm=TRUE))|&gt;\n  left_join(airlines)|&gt;\n  relocate(name, .after = \"carrier\")|&gt;\n  group_by(origin, dest)|&gt;\n  summarise(best_airline = name[which.min(avg_delay)],worst_airline = name[which.max(avg_delay)],worst_avg_delay = max(avg_delay), best_avg_delay = min(avg_delay))\n\n\n`summarise()` has grouped output by 'origin', 'dest'. You can override using\nthe `.groups` argument.\nJoining with `by = join_by(carrier)`\n`summarise()` has grouped output by 'origin'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 128 × 6\n# Groups:   origin [3]\n   origin dest  best_airline        worst_airline worst_avg_delay best_avg_delay\n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;               &lt;chr&gt;                   &lt;dbl&gt;          &lt;dbl&gt;\n 1 EWR    ATL   Endeavor Air Inc.   ExpressJet A…           19.5          -6.25 \n 2 EWR    AUS   Southwest Airlines… United Air L…            4.28        -11.2  \n 3 EWR    BDL   ExpressJet Airline… United Air L…           22.6           6.78 \n 4 EWR    BNA   Southwest Airlines… ExpressJet A…           17.7          -2.13 \n 5 EWR    BOS   ExpressJet Airline… JetBlue Airw…            6.87         -4.01 \n 6 EWR    BWI   Southwest Airlines… ExpressJet A…           20.1           5.95 \n 7 EWR    CHS   United Air Lines I… ExpressJet A…           16.2         -14    \n 8 EWR    CLE   ExpressJet Airline… United Air L…            5.97         -3.71 \n 9 EWR    CLT   US Airways Inc.     ExpressJet A…           20.5           0.920\n10 EWR    CVG   Endeavor Air Inc.   ExpressJet A…           21.2           1.40 \n# ℹ 118 more rows\n\n\n\n\n6.4\n\n\nCode\n#4. \nflights |&gt; group_by(origin, dest)|&gt;\n  filter(n_distinct(carrier)&gt;1)|&gt;\n  group_by(origin, dest, carrier)|&gt;\n  summarise(avg_delay = mean(arr_delay, na.rm=TRUE))|&gt;\n  left_join(airlines, by = \"carrier\")|&gt;\n  relocate(name, .after = \"carrier\")|&gt;\n  group_by(origin, dest)|&gt;\n  summarise(\n    best_airline = name[which.min(avg_delay)],\n    worst_airline = name[which.max(avg_delay)],\n    worst_avg_delay = max(avg_delay, na.rm = TRUE), \n    best_avg_delay = min(avg_delay, na.rm = TRUE),\n    .groups = \"drop\")|&gt;\n  mutate(performance_diff = abs(worst_avg_delay-best_avg_delay))|&gt;\n  arrange(desc(performance_diff))|&gt;\n  slice(1)\n\n\n`summarise()` has grouped output by 'origin', 'dest'. You can override using\nthe `.groups` argument.\n\n\n# A tibble: 1 × 7\n  origin dest  best_airline      worst_airline    worst_avg_delay best_avg_delay\n  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                      &lt;dbl&gt;          &lt;dbl&gt;\n1 JFK    ATL   Endeavor Air Inc. ExpressJet Airl…             128           1.40\n# ℹ 1 more variable: performance_diff &lt;dbl&gt;\n\n\n\n\n6.5\n\nIf an airline has priority access to certain gates or better scheduling slots, it may experience fewer delays.\n\n\n\nAirlines with more flights at a particular airport may have dedicated resources, reducing taxiing and waiting times.\n\n\n\n\nQuestion 7\n\n\nCode\n# Load the dataset\ndata &lt;- structure(list(id = c(\"id_1\", \"id_2\", \"id_3\", \"id_4\", \"id_5\", \n                              \"id_6\", \"id_7\", \"id_8\", \"id_9\", \"id_10\", \"id_11\", \"id_12\", \"id_13\", \n                              \"id_14\", \"id_15\", \"id_16\", \"id_17\", \"id_18\", \"id_19\", \"id_20\", \n                              \"id_21\", \"id_22\", \"id_23\", \"id_24\", \"id_25\", \"id_26\", \"id_27\", \n                              \"id_28\", \"id_29\", \"id_30\", \"id_31\", \"id_32\", \"id_33\", \"id_34\", \n                              \"id_35\", \"id_36\", \"id_37\", \"id_38\", \"id_39\", \"id_40\", \"id_41\", \n                              \"id_42\", \"id_43\", \"id_44\", \"id_45\", \"id_46\", \"id_47\", \"id_48\", \n                              \"id_49\", \"id_50\"), age = c(50L, 34L, 70L, 33L, 22L, 61L, 69L, \n                                                         73L, 62L, 56L, 71L, 33L, 73L, 44L, 45L, 46L, 24L, 70L, 46L, 76L, \n                                                         47L, 76L, 28L, 48L, 54L, 27L, 45L, 26L, 61L, 28L, 38L, 55L, 33L, \n                                                         36L, 62L, 58L, 72L, 31L, 34L, 51L, 61L, 64L, 26L, 28L, 60L, 29L, \n                                                         42L, 46L, 79L, 72L), gender = c(\"male\", \"male\", \"male\", \"female\", \n                                                                                         \"female\", \"male\", \"female\", \"male\", \"male\", \"female\", \"female\", \n                                                                                         \"male\", \"male\", \"female\", \"male\", \"male\", \"male\", \"male\", \"female\", \n                                                                                         \"male\", \"male\", \"male\", \"male\", \"female\", \"femal\", \"male\", \"female\", \n                                                                                         \"female\", \"female\", \"female\", \"male\", \"female\", \"female\", \"female\", \n                                                                                         \"male\", \"male\", \"female\", \"male\", \"female\", \"female\", \"male\", \n                                                                                         \"female\", \"female\", \"male\", \"male\", \"female\", \"male\", \"male\", \n                                                                                         \"male\", \"female\"), height = c(174.4, 197.7, 174.1, 194.5, NA, \n                                                                                                                                  180.4, 170.5, 157.4, 196.8, 165.1, 153, 197.4, 186, 157.1, 177.5, \n                                                                                                                                  197.7, 179.3, 170.2, 182.4, NA, 165.4, 161, 168.5, 199.2, 157.7, \n                                                                                                                                  154.6, 157.1, 184.5, 181, 194.6, 183.6, 186.9, 176.1, 183, 191.1, \n                                                                                                                                  189.3, 199, 172, 165.6, 170.5, 150.5, 159.2, 192.1, 161.6, 162, \n                                                                                                                                  153.8, 162.3, 186.6, 192.4, 174.9), weight = c(69.4, 62.3, 55.6, \n                                                                                                                                                                                 69.5, 78.6, 60.8, 72.2, 60.9, 75.1, 67.7, 82.5, 68.7, 67.8, 76.7, \n                                                                                                                                                                                 87, 61.1, 70.6, 63.3, 81.5, 59.2, 93.2, 87.3, 83.4, 80.9, 68.6, \n                                                                                                                                                                                 76.5, 93.7, 79.1, 92, 65.6, 85.4, 63.3, 79.7, 74.1, 63.3, 78.2, \n                                                                                                                                                                                 95.7, 95.1, 63.7, 66.1, 99.3, 81, 96.9, 73.3, 70.3, 83, 57.6, \n                                                                                                                                                                                 78.6, 61.9, 98.1), blood_type = c(\"O\", \"A\", \"O\", \"O\", \"B\", \"AB\", \n                                                                                                                                                                                                                  \"O\", \"O\", \"O\", \"AB\", \"A\", \"O\", \"O\", \"O\", \"B\", \"A\", \"B\", \"AB\", \n                                                                                                                                                                                                                  \"O\", \"AB\", \"A\", \"AB\", \"O\", \"B\", \"A\", \"A\", \"B\", \"AB\", \"A\", \"B\", \n                                                                                                                                                                                                                  \"B\", \"A\", \"O\", \"O\", \"O\", \"B\", \"O\", \"A\", \"A\", \"B\", \"A\", \"O\", \"AB\", \n                                                                                                                                                                                                                  \"A\", \"A\", \"O\", \"O\", \"B\", \"A\", \"O\"), disease_status = c(\"diseased\", \n                                                                                                                                                                                                                                                                        \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"diseased\", \n                                                                                                                                                                                                                                                                        \"healthy\", \"diseased\", \"Healthy\", \"diseased\", \"healthy\", \"diseased\", \n                                                                                                                                                                                                                                                                        \"healthy\", \"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n                                                                                                                                                                                                                                                                        \"healthy\", \"healthy\", \"diseased\", \"healthy\", \"diseased\", \"healthy\", \n                                                                                                                                                                                                                                                                        \"healthy\", \"healthy\", \"healthy\", \"diseased\", \"diseased\", \"healthy\", \n                                                                                                                                                                                                                                                                        \"healthy\", \"healthy\", \"diseased\", \"diseased\", \"diseased\", \"healthy\", \n                                                                                                                                                                                                                                                                        \"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n                                                                                                                                                                                                                                                                        \"diseased\", \"diseased\", \"diseased\", \"healthy\", \"healthy\", \"diseased\", \n                                                                                                                                                                                                                                                                        \"diseased\"), cholesterol = c(228, 223, 213, 198, 166, 151, 195, \n                                                                                                                                                                                                                                                                                                     199, 189, 196, 221, 156, 185, 230, 234, 174, 185, 236, 235, 180, \n                                                                                                                                                                                                                                                                                                     165, 220, 160, 153, 250, 153, 184, 242, 212, 179, 224, 233, 181, \n                                                                                                                                                                                                                                                                                                     199, 220, 214, 214, 248, 191, 162, 203, 173, 199, 187, 248, 189, \n                                                                                                                                                                                                                                                                                                     173, 212, 164, 247), glucose = c(96, 78, 101, 119, 103, 91, 86, \n                                                                                                                                                                                                                                                                                                                                     NA, 77, 80, 115, 85, 88, 109, NA, 71, 90, 94, 91, 87, 113, 93, \n                                                                                                                                                                                                                                                                                                                                     97, 118, 109, 80, 85, 119, 99, 108, 89, 108, 97, 116, 79, 84, \n                                                                                                                                                                                                                                                                                                                                     75, 81, 119, NA, 106, 109, 75, 82, 84, 75, 76, 120, 119, 77), \n                       smoker = c(\"yes\", \"yes\", \"yes\", \"yes\", \"no\", \"yes\", \"no\", \n                                  \"yes\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n                                  \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"no\", \n                                  \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n                                  \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \n                                  \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\"), exercise = c(\"occasional\", \n                                                                                          \"regular\", \"occasional\", \"regular\", \"none\", \"occasional\", \n                                                                                          \"regular\", \"none\", \"occasional\", \"none\", \"occasional\", \"none\", \n                                                                                          \"none\", \"regular\", \"occasional\", \"none\", \"regular\", \"regular\", \n                                                                                          \"none\", \"occasional\", \"none\", \"occasional\", \"occasional\", \n                                                                                          \"occasional\", \"regular\", \"occasional\", \"regular\", \"regular\", \n                                                                                          \"regular\", \"occasional\", \"occasional\", \"none\", \"none\", \"regular\", \n                                                                                          \"occasional\", \"occasional\", \"none\", \"none\", \"none\", \"none\", \n                                                                                          \"occasional\", \"regular\", \"regular\", \"none\", \"regular\", \"occasional\", \n                                                                                          \"occasional\", \"none\", \"occasional\", \"regular\"), income = c(84820L, \n                                                                                                                                                     81547L, 22588L, 72490L, 74533L, 25338L, 41469L, 57315L, 63629L, \n                                                                                                                                                     88662L, 62615L, 56261L, 58499L, 82232L, 77584L, 77275L, 38468L, \n                                                                                                                                                     54510L, 91326L, 78611L, 31402L, 29586L, 21441L, 58269L, 84173L, \n                                                                                                                                                     88295L, 37940L, 43750L, 69750L, 92356L, 82518L, 91455L, 68866L, \n                                                                                                                                                     51178L, 68275L, 27689L, 35418L, 81318L, 62405L, 86851L, 25654L, \n                                                                                                                                                     47553L, 74474L, 51409L, 22607L, 55360L, 96351L, 21516L, 41927L, \n                                                                                                                                                     55810L), education = c(\"master\", \"bachelor\", \"PhD\", \"master\", \n                                                                                                                                                                            \"bachelor\", \"highschool\", \"PhD\", \"highschool\", \"PhD\", \"PhD\", \n                                                                                                                                                                            \"bachelor\", \"highschool\", \"master\", \"bachelor\", \"PhD\", \"PhD\", \n                                                                                                                                                                            \"PhD\", \"bachelor\", \"master\", \"highschool\", \"PhD\", \"highschool\", \n                                                                                                                                                                            \"bachelor\", \"master\", \"highschool\", \"highschool\", \"master\", \n                                                                                                                                                                            \"master\", \"bachelor\", \"PhD\", \"highschool\", \"PhD\", \"master\", \n                                                                                                                                                                            \"master\", \"master\", \"PhD\", \"highschool\", \"master\", \"master\", \n                                                                                                                                                                            \"highschool\", \"bachelor\", \"highschool\", \"bachelor\", \"PhD\", \n                                                                                                                                                                            \"bachelor\", \"highschool\", \"master\", \"highschool\", \"bachelor\", \n                                                                                                                                                                            \"bachelor\"), region = c(\"North\", \"South\", \"North\", \"West\", \n                                                                                                                                                                                                   \"North\", \"West\", \"South\", \"South\", \"West\", \"South\", \"West\", \n                                                                                                                                                                                                   \"South\", \"West\", \"East\", \"North\", \"West\", \"North\", \"North\", \n                                                                                                                                                                                                   \"West\", \"North\", \"East\", \"West\", \"South\", \"North\", \"North\", \n                                                                                                                                                                                                   \"East\", \"East\", \"North\", \"North\", \"West\", \"South\", \"West\", \n                                                                                                                                                                                                   \"West\", \"East\", \"West\", \"North\", \"West\", \"North\", \"East\", \n                                                                                                                                                                                                   \"North\", \"West\", \"South\", \"South\", \"East\", \"North\", \"West\", \n                                                                                                                                                                                                   \"West\", \"East\", \"North\", \"East\"), marital_status = c(\"divorced\", \n                                                                                                                                                                                                                                                      \"single\", \"divorced\", \"divorced\", \"divorced\", \"divorced\", \n                                                                                                                                                                                                                                                      \"divorced\", \"married\", \"divorced\", \"married\", \"divorced\", \n                                                                                                                                                                                                                                                      \"widowed\", \"married\", \"single\", \"widowed\", \"widowed\", \"single\", \n                                                                                                                                                                                                                                                      \"divorced\", \"widowed\", \"widowed\", \"single\", \"married\", \"single\", \n                                                                                                                                                                                                                                                      \"married\", \"widowed\", \"married\", \"single\", \"single\", \"widowed\", \n                                                                                                                                                                                                                                                      \"married\", \"widowed\", \"divorced\", \"single\", \"married\", \"single\", \n                                                                                                                                                                                                                                                      \"widowed\", \"widowed\", \"married\", \"widowed\", \"divorced\", \"married\", \n                                                                                                                                                                                                                                                      \"married\", \"divorced\", \"single\", \"married\", \"widowed\", \"divorced\", \n                                                                                                                                                                                                                                                      \"divorced\", \"single\", \"divorced\")), row.names = c(NA, -50L\n                                                                                                                                                                                                                                                      ), class = c(\"tbl_df\", \"tbl\", \"data.frame\"))\n\n\n\n\nCode\n#Check missing VaLues\nskim(data)\n\n\n\nData summary\n\n\nName\ndata\n\n\nNumber of rows\n50\n\n\nNumber of columns\n15\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n9\n\n\nnumeric\n6\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nid\n0\n1\n4\n5\n0\n50\n0\n\n\ngender\n0\n1\n4\n6\n0\n3\n0\n\n\nblood_type\n0\n1\n1\n2\n0\n4\n0\n\n\ndisease_status\n0\n1\n7\n8\n0\n3\n0\n\n\nsmoker\n0\n1\n2\n3\n0\n2\n0\n\n\nexercise\n0\n1\n4\n10\n0\n3\n0\n\n\neducation\n0\n1\n3\n10\n0\n4\n0\n\n\nregion\n0\n1\n4\n5\n0\n4\n0\n\n\nmarital_status\n0\n1\n6\n8\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nage\n0\n1.00\n49.50\n17.04\n22.0\n33.25\n47.5\n62.00\n79.0\n▇▃▇▅▇\n\n\nheight\n2\n0.96\n175.99\n14.78\n150.5\n162.23\n175.5\n187.50\n199.2\n▆▆▇▇▇\n\n\nweight\n0\n1.00\n75.51\n11.99\n55.6\n65.72\n74.6\n82.88\n99.3\n▇▇▇▃▅\n\n\ncholesterol\n0\n1.00\n199.86\n28.85\n151.0\n179.25\n198.5\n222.50\n250.0\n▆▇▅▇▆\n\n\nglucose\n3\n0.94\n94.74\n15.23\n71.0\n81.50\n91.0\n108.50\n120.0\n▇▇▆▆▆\n\n\nincome\n0\n1.00\n59907.36\n22779.01\n21441.0\n41583.50\n60452.0\n80641.25\n96351.0\n▇▅▇▇▇\n\n\n\n\n\nCode\n#Check for inconsistencies\nUtilsDataRSV::view_cols(data)\n\n\n[1] \"id\"\n [1] \"id_50\" \"id_4\"  \"id_8\"  \"id_1\"  \"id_11\" \"id_39\" \"id_18\" \"id_2\"  \"id_34\"\n[10] \"id_22\" \"id_37\" \"id_36\" \"id_21\" \"id_27\" \"id_32\" \"id_19\" \"id_23\" \"id_7\" \n[19] \"id_16\" \"id_20\"\n[1] \"30 unique entries not displayed\"\n[1] \"_____________________\"\n[1] \"age\"\n[1] 29 48 33 71 58\n[1] \"_____________________\"\n[1] \"gender\"\n[1] \"female\" \"femal\"  \"male\"  \n[1] \"_____________________\"\n[1] \"height\"\n[1] 179.3 157.1 161.6 194.5    NA\n[1] \"_____________________\"\n[1] \"weight\"\n[1] 69.4 87.3 79.7 76.7 75.1\n[1] \"_____________________\"\n[1] \"blood_type\"\n[1] \"B\"  \"A\"  \"O\"  \"AB\"\n[1] \"_____________________\"\n[1] \"disease_status\"\n[1] \"healthy\"  \"Healthy\"  \"diseased\"\n[1] \"_____________________\"\n[1] \"cholesterol\"\n[1] 203 181 173 160 191\n[1] \"_____________________\"\n[1] \"glucose\"\n[1]  88 119  79  84  NA\n[1] \"_____________________\"\n[1] \"smoker\"\n[1] \"yes\" \"no\" \n[1] \"_____________________\"\n[1] \"exercise\"\n[1] \"none\"       \"occasional\" \"regular\"   \n[1] \"_____________________\"\n[1] \"income\"\n[1] 25338 51178 31402 51409 77584\n[1] \"_____________________\"\n[1] \"education\"\n[1] \"PhD\"        \"bachelor\"   \"master\"     \"highschool\"\n[1] \"_____________________\"\n[1] \"region\"\n[1] \"North\" \"West\"  \"South\" \"East\" \n[1] \"_____________________\"\n[1] \"marital_status\"\n[1] \"single\"   \"married\"  \"divorced\" \"widowed\" \n[1] \"_____________________\"\n\n\nWarning: Not all unique entries displayed for these non-numeric cols: id\n\n\n\nThere are 3 unique genders as show by skim() and this is because we have a typo for the gender variable, “female” is misspelled as “femal”.\nThere is another typo for the disease_status, “healthy” is misspelled as “Healthy”.\nGlucose and Height have NA’s.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Part 3: Practical Day Four</span>"
    ]
  }
]